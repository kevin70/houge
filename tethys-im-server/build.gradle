apply plugin: "application"
apply plugin: "com.bmuschko.docker-remote-api"

mainClassName = "top.yein.tethys.im.main.ImMain"

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:3.12.0"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:1.36.1"
    }
  }
  generatedFilesBaseDir = "$projectDir/src/generated"
  generateProtoTasks {
    all()*.plugins {
      grpc {}
    }
  }
}

File dockerInputDir() {
  def f = file("${buildDir}/docker/")
  if (!f.exists()) {
    f.mkdirs()
  }
  return f
}

task copyDockerResource {
  group "docker"
  doLast {
    copy {
      from("${buildDir}/libs")
      into(dockerInputDir())
      include("*-all.jar")
      rename(".*-all.jar", "app.jar")
    }
    copy {
      from(projectDir)
      into(dockerInputDir())
      include("Dockerfile")
    }
  }
}

task buildImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage) {
  group "docker"
  dependsOn("shadowJar", "copyDockerResource")
  inputDir = dockerInputDir()
  images.addAll("kevin70/tethys-im:latest", "kevin70/tethys-im:${version}".toString())
}

dependencies {
  implementation(project(":tethys-core"))
  implementation(project(":tethys-service"))
  implementation("org.apache.logging.log4j:log4j-core")
  implementation("org.apache.logging.log4j:log4j-slf4j-impl")
  implementation("io.projectreactor:reactor-tools")
  implementation("io.grpc:grpc-netty")
  implementation("io.grpc:grpc-protobuf")
  implementation("io.grpc:grpc-stub")

  protobuf files("${rootDir}/protos")
}
