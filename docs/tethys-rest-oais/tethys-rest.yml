openapi: "3.0.3"
info:
  version: 1.0.0
  title: Tethys REST RESTful 接口
  description: |
    Tethys REST 所有开放的接口都在本文件内进行定义，文件详细描述了接口的名称、约束及作用范围，请严格按照文档的要求在适合的环境中调用相应的接口。

    - 以 `/-` 为前缀的路径是**系统内部**的 API，用于获取应用基础信息，或者保证应用正常运行的支持接口设计。
    - 以 `/i` 为前缀的路径是**服务内部**的 API，为业务服务端设计，该路径下的所有接口应该是在安全可信的环境下调用执行。
    - 以 `/p` 为前缀的路径是**公共**的 API，可在所有环境下调用执行。

servers:
  - url: http://127.0.0.1:11019/
tags:
  - name: SUPPORT
    description: 系统支撑
  - name: MESSAGE
    description: IM 消息
x-tagGroups:
  - name: 支撑
    tags: [SUPPORT]
  - name: 消息
    tags: [MESSAGE]
paths:
  /-/info:
    get:
      tags: [SUPPORT]
      summary: 应用信息
      responses:
        "200":
          description: OK
          content:
            application/json:
              example: { "app": { "name": "tethys-rest", "version": "unknown", "fid": 98847 }, "java": { "version": "11.0.8", "vendor": "Oracle Corporation" } }
  /-/health:
    get:
      tags: [SUPPORT]
      summary: 应用健康状况
      responses:
        "200":
          description: OK
          content:
            application/json:
              example: { "status": "UP" }
  /i/token/{uid}:
    parameters:
      - name: uid
        in: path
        required: true
        description: 用户 ID
        schema:
          type: integer
          format: int64
    post:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 为指定用户生成访问令牌
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - access_token
                properties:
                  access_token:
                    type: string
                    description: 可用于访问 IM 系统接口的认证令牌
  /i/users:
    post:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 创建用户
      description: |
        在 IM 系统中创建可用于聊天的用户。
      requestBody:
        description: |
          请求体中的 `id` 与 `origin_uid` 字段二选一, 如果传入的 `id` 值则会直接映射到 IM 系统中用户的 ID，
          该方式可以保证业务系统中的用户 ID 与 IM 系统中的用户 ID 相同。如果传入 `origin_uid` 值 IM 系统
          会在内部映射一个数字类型的 `id` 值并返回。
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  description: 全局唯一的用户 ID，如果业务方手动传入则调用者必须保证其唯一性
                origin_uid:
                  type: string
                  description: 调用者系统内部的唯一用户 ID，如果业务方手动传入则调用者必须保证其唯一性
      responses:
        "200":
          description: |
            如果在请求体中设置了 `id` 参数，则响应的 `id` 属性与其相同。如果请求体中是传入的 `origin_uid` 值则
            响应的 `id` 值为 IM 系统中生成的用户 ID。
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                properties:
                  id:
                    type: integer
                    format: int64
                    description: 全局唯一的用户 ID
  /i/groups:
    post:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 创建群组
      description: |
        在 IM 系统中创建可用于多人聊天的群组，群组创建成功后创建者（`creator_id`）将自动加入为该群的成员。
      requestBody:
        description: |
          请求体中的 `id` 是非必须字段。如果业务方传入了 `id` 值，IM 将会使用其作为 IM 系统内部群组ID，反之 IM
          系统会自动生成一个全局唯一的群组 ID。
        content:
          application/json:
            schema:
              type: object
              required:
                - creator_id
              properties:
                id:
                  type: integer
                  format: int64
                  description: 全局唯一的群组 ID，如果业务方手动传入则调用者必须保证其唯一性
                creator_id:
                  type: integer
                  format: int64
                  description: 群组创建者，必须映射一个 IM 系统中已经存在的用户 IM
      responses:
        "200":
          description: |
            如果在请求体中设置了 `id` 参数，则响应的 `id` 属性与其相同，反之响应的 `id` 值为 IM 系统中生成的群组 ID。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: 全局唯一的群组 ID
  /i/groups/{group_id}:
    parameters:
      - name: group_id
        in: path
        required: true
        description: IM 系统中已经存在的群组 ID
        schema:
          type: integer
          format: int64
    delete:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 删除指定的群组
      description: |
        删除指定群组并解除群成员关系。
      responses:
        "204":
          description: OK
  /i/groups-member/{group_id}/join:
    parameters:
      - name: group_id
        in: path
        required: true
        description: IM 系统中已经存在的群组 ID
        schema:
          type: integer
          format: int64
    put:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 将用户添加为指定群组的成员
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
              properties:
                uid:
                  type: integer
                  format: int64
                  description: IM 系统中已经存在的用户 ID
      responses:
        "204":
          description: OK
    delete:
      tags: [SUPPORT]
      security: [Basic:[]]
      summary: 将用户与指定群组的成员关系解除
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - uid
              properties:
                uid:
                  type: integer
                  format: int64
                  description: IM 系统中已经存在的用户 ID
      responses:
        "204":
          description: OK
  /p/message-ids:
    get:
      parameters:
        - name: limit
          in: query
          description: 返回 ID 的最大数量
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 100
      tags: [MESSAGE]
      security: [AccessToken:[]]
      summary: 获取 IM 消息 ID
      description: |
        返回 IM 消息 ID 列表，该列表中的 ID 用于在后续聊天消息中使用，每个 ID 仅可使用一次。
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: IM 消息 ID
  /p/messages:
    get:
      tags: [MESSAGE]
      security: [AccessToken:[]]
      summary: 获取指定时间以后的消息
      description: |
        如果返回的消息数组的长度小于 `limit` 请求查询参数值，则代表服务端没有更多的消息不需要继续查询，反之则
        代表服务端还有更多的消息，客户端需要继续调用些接口拉取私聊信息，直到消息数组的长度小于 `limit`。
      parameters:
        - name: begin_time
          in: query
          description: |
            查询 `begin_time` 之后（包含 `begin_time`）接收到的消息。

            默认仅支持查询`3天（72小时）`以内的消息查询，时间超出范围将默认将 `begin_time` 设置为可查询的最早时间。
          schema:
            type: string
            format: date-time
        - name: offset
          in: query
          description: 查询偏移量
          schema:
            type: integer
            format: int32
        - name: limit
          in: query
          description: 返回最大的条数
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Message"
  /p/messages/send:
    post:
      tags: [MESSAGE]
      security: [AccessToken:[]]
      summary: 发送消息
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                kind:
                  type: integer
                  format: int32
                  enum: [0, 1]
                  default: 0
                  description: |
                    消息类型
                    - `0` 私人消息
                    - `1` 群组消息
                to:
                  type: integer
                  format: int64
                  description: |
                    消息接收者

                    如果是**私人消息**将 `to` 设置为接收消息用户的 ID，如果是**群组消息**将 `to` 设置为接收消息的群组 ID。
                content:
                  type: string
                  description: 消息内容
                  maxLength: 4096
                content_type:
                  type: integer
                  format: int32
                  default: 0
                  enum: [0, 1, 2, 3]
                  description: |
                    消息内容类型
                    - `0` 普通文本消息
                    - `1` 图片消息
                    - `2` 语音消息
                    - `3` 视频消息
                url:
                  type: string
                  description: 统一资源定位器
                extra_args:
                  type: string
                  description: 扩展参数将原样转发至客户端
                  maxLength: 2048
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - message_id
                properties:
                  message_id:
                    type: string
                    description: 消息 ID
                    example: 7K7KJKK56K23OMY
  /p/messages/read:
    put:
      tags: [MESSAGE]
      security: [AccessToken:[]]
      summary: 批量更新消息已读状态
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message_ids
              properties:
                message_ids:
                  type: array
                  description: 消息 ID 列表，同时最大支持 100 条消息的已读状态更新
                  maxItems: 100
                  items:
                    type: string
                    default: 7K7KJKK56K23OMY
      responses:
        "204":
          description: OK
components:
  securitySchemes:
    AccessToken:
      type: apiKey
      description: 访问令牌
      name: access_token
      in: query
    Basic:
      type: http
      scheme: Basic
  schemas:
    Message:
      type: object
      required:
        - id
        - sender_id
        - content
        - create_time
      properties:
        id:
          type: string
          description: 消息 ID，全局唯一
          example: 7K7KJKK56K23OMY
        sender_id:
          type: integer
          format: int64
          description: 消息发送者 ID
        receiver_id:
          type: integer
          format: int64
          description: 消息接收者 ID
        group_id:
          type: integer
          format: int64
          description: 消息接收群组 ID
        kind:
          type: integer
          enum: [0, 1]
          default: 0
          description: |
            消息类型
            - `1` 私人消息
            - `1` 群组消息
        content:
          type: string
          description: 消息内容
        content_type:
          type: integer
          format: int32
          default: 0
          enum: [0, 1, 2, 3]
          description: |
            消息内容类型
            - `0` 普通文本消息
            - `1` 图片消息
            - `2` 语音消息
            - `3` 视频消息
        extra_args:
          type: string
          description: 扩展参数
        unread:
          type: integer
          default: 0
          enum: [0, 1]
          description: |
            消息是否未读
            - `0` 已读
            - `1` 未读
        create_time:
          type: string
          format: date-time
          description: 消息创建时间